{"version":3,"file":"dynamic-form-builder.js","sourceRoot":"","sources":["dynamic-form-builder.ts"],"names":[],"mappings":"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","sourcesContent":["import {FormGroup} from \"@angular/forms\";\nimport {FieldConfigBuilder} from \"./field-config-builder\";\nimport {DynamicFormFieldGroupBuilder} from \"./dynamic-form-field-group-builder\";\nimport {FieldGroup, Layout} from \"../model/FieldGroup\"\n\n\nexport class FormConfig{\n\n    title:string;\n    message: string;\n    fieldGroups:FieldGroup[];\n\n    onApplyFn:Function;\n    onCancelFn:Function;\n\n    form:FormGroup;\n\n    constructor(){\n\n    }\n}\nexport interface StyleClassStrategy{\n\n    applyStyleClass(builder:FieldConfigBuilder<any>):void;\n}\n\nexport class HintLengthPaddingStrategy implements StyleClassStrategy{\n\n    constructor(private hintLength1:number  = 120, private hintLength2: number = 160, private hintLength3:number = 200){}\n\n    applyStyleClass(builder:FieldConfigBuilder<any>):void{\n        builder.appendStyleClass(\"pad-bottom\");\n        /*\n        if(builder.getHint() ){\n            if(builder.getHint().length > this.hintLength3){\n                builder.appendStyleClass(\"pad-bottom-lg\");\n            } else if(builder.getHint().length > this.hintLength2){\n                builder.appendStyleClass(\"pad-bottom-md\");\n            } else if(builder.getHint().length > this.hintLength1){\n                builder.appendStyleClass(\"pad-bottom\");\n            }\n        }\n        */\n    }\n}\n\nexport class DynamicFormBuilder {\n\n    private title:string;\n    private message: string;\n    private formFieldBuilders:DynamicFormFieldGroupBuilder[];\n    private form:FormGroup\n\n    private onApplyFn:Function;\n    private onCancelFn:Function;\n\n    public styleClassStrategy:StyleClassStrategy = new HintLengthPaddingStrategy();\n\n    constructor(){\n        this.formFieldBuilders = [];\n    }\n\n    setTitle(title:string){\n        this.title = title;\n        return this;\n    }\n    setMessage(value:string){\n        this.message = value;\n        return this;\n    }\n\n    setStyleClassStrategy(styleClassStrategy:StyleClassStrategy){\n        this.styleClassStrategy = styleClassStrategy;\n        return this;\n    }\n\n    onApply(callback:Function, bindTo?:any){\n        if(bindTo) {\n            this.onApplyFn = callback.bind(bindTo);\n        }\n        else {\n            this.onApplyFn = callback;\n        }\n        return this;\n    }\n\n    onCancel(callback:Function,bindTo?:any){\n        if(bindTo) {\n            this.onCancelFn = callback.bind(bindTo);\n        }\n        else {\n            this.onCancelFn = callback\n        }\n        return this;\n    }\n\n    /**\n     * Append a new row, optionally insert a new row at given index\n     * param {number} index - optional index at which to create the row\n     * returns {DynamicFormFieldGroupBuilder}\n     */\n    row(index?: number){\n        let rowBuilder = new DynamicFormFieldGroupBuilder(this,Layout.ROW);\n        if (index) {\n            this.formFieldBuilders.splice(index, 0, rowBuilder);\n        } else {\n            this.formFieldBuilders.push(rowBuilder);\n        }\n        return rowBuilder;\n    }\n\n    /**\n     * Append a new column, optionally insert a new column at given index\n     * param {number} index - optional index at which to insert a new column\n     * returns {DynamicFormFieldGroupBuilder}\n     */\n    column(index?: number){\n        let columnBuilder = new DynamicFormFieldGroupBuilder(this,Layout.COLUMN);\n        if (index) {\n            this.formFieldBuilders.splice(index, 0, columnBuilder);\n        } else {\n            this.formFieldBuilders.push(columnBuilder);\n        }\n\n        return columnBuilder;\n    }\n\n    done(){\n        return this;\n    }\n\n    resetForm(){\n        if(this.form) {\n            console.log('RESET FORM!!!! ',Object.keys(this.form.controls).length)\n            Object.keys(this.form.controls).forEach(controlName => {\n                if(this.form.contains(controlName)) {\n                    this.form.removeControl(controlName)\n                }\n            });\n        }\n        this.formFieldBuilders = [];\n\n\n\n    }\n\n    setForm(value:FormGroup){\n        this.form = value;\n        return this;\n    }\n\n    buildFieldConfiguration():FieldGroup[]{\n        //set the fields\n        return this.formFieldBuilders.map(builder => builder.build());\n    }\n\n\n\n    build():FormConfig{\n        let formConfig = new FormConfig();\n\n        formConfig.title = this.title;\n        formConfig.message = this.message;\n\n        //set the form\n        if(this.form == undefined){\n            this.form = new FormGroup({});\n        }\n        formConfig.form = this.form;\n\n        //set the fields\n        formConfig.fieldGroups = this.buildFieldConfiguration();\n\n        //set the callbacks\n        formConfig.onApplyFn = this.onApplyFn;\n        formConfig.onCancelFn = this.onCancelFn;\n\n        return formConfig;\n    }\n}\n"]}