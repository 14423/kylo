{"version":3,"file":"object-utils.js","sourceRoot":"","sources":["object-utils.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAC,UAAU,EAAC,wBAAwB;AAE3C,MAAM,OAAO,WAAW;;;;;IAGpB,MAAM,CAAC,cAAc,CAAC,GAAO;QACzB,IAAI,GAAG,IAAI,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,WAAW,CAAC,QAAQ,EAAE;YACpD,qBAAI,GAAG,GAAG,GAAG,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,KAAK,CACtC,kBAAkB,CAAC,CAAC;YAExB,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,EAAE;gBACxB,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;aACjB;SACJ;QAED,OAAO,SAAS,CAAC;KACpB;;;;;;IAED,MAAM,CAAC,QAAQ,CAAI,GAAM;QACrB,OAAO,GAAG,CAAC;KACd;;;;;;IAED,MAAM,CAAC,MAAM,CAAC,GAAO,EAAE,IAAW;QAC9B,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC;KACrD;;;;;;;;IAED,MAAM,CAAC,KAAK,CAAuB,GAAO,EAAE,IAA0B,EAAE,UAAmB;QACvF,qBAAI,SAAS,GAAY,KAAK,CAAC;QAC/B,qBAAI,WAAW,GAAG,IAAI,CAAC;QACvB,qBAAI,EAAE,GAAG,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACpC,IAAG,UAAU,IAAI,SAAS,EAC1B;YACG,UAAU,GAAG,EAAE,CAAC,IAAI,CAAC;SACvB;QACD,IAAG,WAAW,CAAC,MAAM,CAAC,GAAG,EAAC,UAAU,CAAC,EAAE;YACnC,yBAAU,GAAG,EAAC;SACjB;aACI;YACD,OAAO,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;SACxB;KACJ;;;;;;;IAED,MAAM,CAAC,OAAO,CAAI,OAAW,EAAE,IAA0B;QACrD,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;KAC5B;;;;;IAED,MAAM,CAAC,MAAM,CAAC,GAAS;QACnB,IAAI,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC;YAAE,OAAO,SAAS,CAAC;QACnD,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;KAC9B;;;;;IACD,MAAM,CAAC,SAAS,CAAC,KAAW;QACxB,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KAC1C;;;;;IAED,MAAM,CAAC,WAAW,CAAC,KAAW;QAC1B,OAAO,OAAO,KAAK,KAAK,WAAW,CAAC;KACvC;CACJ","sourcesContent":["import {KyloObject} from \"../common.model\";\n\nexport class ObjectUtils {\n\n\n    static getObjectClass(obj:any) {\n        if (obj && obj.constructor && obj.constructor.toString) {\n            var arr = obj.constructor.toString().match(\n                /function\\s*(\\w+)/);\n\n            if (arr && arr.length == 2) {\n                return arr[1];\n            }\n        }\n\n        return undefined;\n    }\n\n    static identity<T>(arg: T): T {\n        return arg;\n    }\n\n    static isType(obj:any, type:string) {\n        return (obj.objectType && obj.objectType == type);\n    }\n\n    static getAs<T extends KyloObject>(obj:any, type: { new(arg:any): T ;}, objectType ?:string) : T {\n        let validType :boolean = false;\n        let newInstance = null;\n        let id = ObjectUtils.identity(type);\n        if(objectType == undefined)\n        {\n           objectType = id.name;\n        }\n        if(ObjectUtils.isType(obj,objectType)) {\n            return <T>obj;\n        }\n        else {\n            return new type(obj);\n        }\n    }\n\n    static newType<T>(options:any, type: { new(arg:any): T ;}) :T {\n        return new type(options);\n    }\n\n    static toJson(obj : any) : any {\n        if (ObjectUtils.isUndefined(obj)) return undefined;\n        return JSON.stringify(obj);\n    }\n    static isDefined(value : any) : boolean {\n        return !ObjectUtils.isUndefined(value);\n    }\n\n    static isUndefined(value : any) : boolean {\n        return typeof value === 'undefined';\n    }\n}\n"]}