{"version":3,"file":"Chip.js","sourceRoot":"","sources":["Chip.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAC,WAAW,EAAC,sBAAsB;AAC1C,OAAO,KAAK,CAAC,mBAAkB;AAE/B,MAAM,OAAO,IAAK,SAAQ,WAAmB;;;;IAKzC,YAAY,UAAc,EAAE;QACxB,KAAK,CAAC,OAAO,CAAC,CAAC;QAJnB,mBAAc,IAAI,CAAC,YAAY,CAAC;QAChC,aAAc,EAAE,CAAC;QACjB,eAAkB,KAAK,CAAC;QAaxB,gBAAoB,KAAK,CAAC;QAC1B,oBAAwB,IAAI,CAAC;QAC7B,mBAAuB,IAAI,CAAC;QAI5B,qBAA0B,EAAE,CAAC;QAhBzB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;QAC9B,IAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,SAAS,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAC;YAC/D,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,IAAQ,EAAE,EAAE;gBACpD,OAAO,IAAI,CAAC,KAAK,CAAC;aACrB,CAAC,CAAC;YACH,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;SAC3C;QACD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC;KAC9C;;;;IAUD,QAAQ;QACJ,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;KACxB;;;;;IAED,WAAW,CAAC,KAAa;QACrB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAS,EAAE,EAAE;YACjD,IAAI,KAAK,EAAE;gBACP,OAAO,IAAI,CAAC,KAAK,IAAI,mBAAC,IAAI,CAAC,KAAe,EAAC,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;aAC/F;iBAAM;gBACH,OAAO,KAAK,CAAC;aAChB;SACJ,CAAC,CAAC,MAAM,CAAC,CAAC,YAAiB,EAAE,EAAE;YAC5B,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;SACzF,CAAC,CAAC,GAAG,CAAC,CAAC,IAAQ,EAAE,EAAE;YAChB,OAAO,IAAI,CAAC,KAAK,CAAC;SACrB,CAAC,CAAC;KACN;;;;;IAED,WAAW,CAAC,KAAU;QAElB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAS,EAAE,EAAE;YACnD,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;SACnF,CAAC,CAAC;KACN;;AA/CD,oBAAsB,OAAO,CAAA","sourcesContent":["import {FieldConfig} from \"./FieldConfig\";\nimport * as _ from \"underscore\"\n\nexport class Chip extends FieldConfig<string> {\n    static CONTROL_TYPE = \"chips\"\n    controlType = Chip.CONTROL_TYPE;\n    items:any[] = [];\n    stacked:boolean = false;\n    constructor(options: {} = {}) {\n        super(options);\n        this.items = options['items'];\n        if(options['values'] !== undefined && _.isArray(options['values'])){\n            this.selectedItems = options['values'].map((item:any) => {\n                return item.label;\n            });\n            this.filteredItems = this.selectedItems;\n        }\n        this.stacked = options['stacked'] || false;\n    }\n\n    disabled: boolean = false;\n    chipAddition: boolean = true;\n    chipRemoval: boolean = true;\n\n    filteredItems: string[];\n\n    selectedItems: string[] = [];\n\n    ngOnInit(): void {\n        this.filterItems('');\n    }\n\n    filterItems(value: string): void {\n        this.filteredItems = this.items.filter((item: any) => {\n            if (value) {\n                return item.value && (item.value as string).toLowerCase().indexOf(value.toLowerCase()) > -1;\n            } else {\n                return false;\n            }\n        }).filter((filteredItem: any) => {\n            return this.selectedItems ? this.selectedItems.indexOf(filteredItem.label) < 0 : true;\n        }).map((item:any) => {\n            return item.label;\n        });\n    }\n\n    updateModel(value: any) {\n\n        this.model['values'] = this.items.filter((item: any) => {\n            return this.selectedItems ? this.selectedItems.indexOf(item.label) > -1 : false;\n        });\n    }\n}"]}