{"version":3,"file":"dynamic-form-util.js","sourceRoot":"","sources":["dynamic-form-util.ts"],"names":[],"mappings":"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","sourcesContent":["import {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {FieldConfig} from \"../model/FieldConfig\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {SectionHeader} from \"../model/SectionHeader\";\nimport {StaticText} from \"../model/StaticText\";\nimport {Checkbox} from \"../model/Checkbox\";\nimport {Chip} from \"../model/Chip\";\n\nexport class DynamicFormUtil {\n\n    static toFormGroup(fields: FieldConfig<any>[],_translateService?: TranslateService ) :FormGroup {\n        let group: any = {};\n\n        fields.filter(field => !DynamicFormUtil.isTextOnlyField(field)).forEach(field => {\n            group[field.key] = DynamicFormUtil.toFormControl(field,_translateService);\n        });\n        return new FormGroup(group);\n    }\n\n   private static translate(key:string,defaultValue:string,_translateService: TranslateService){\n        let trans = _translateService.instant(key);\n        if(trans == key && defaultValue){\n            return defaultValue;\n        }\n        else {\n            return trans\n        }\n    }\n\n    static resolveLocaleKeys(field:FieldConfig<any>,_translateService?: TranslateService) {\n        if(_translateService) {\n\n            if (field.placeholderLocaleKey != undefined) {\n                let placeholder = DynamicFormUtil.translate(field.placeholderLocaleKey,field.placeholder,_translateService)\n                field.placeholder = placeholder;\n            }\n        }\n    }\n\n    static isTextOnlyField(field:FieldConfig<any>){\n        return SectionHeader.CONTROL_TYPE == field.controlType || StaticText.CONTROL_TYPE == field.controlType;\n    }\n\n    static addToFormGroup(fields:FieldConfig<any>[], formGroup:FormGroup, _translateService?: TranslateService):FormControl[]{//: {[key: FieldConfig<any>]: FormControl}{\n        //  let group:  {[key: FieldConfig<any>]: FormControl} = {};\n        let formControls:FormControl[] = [];\n\n        fields.filter(field => !DynamicFormUtil.isTextOnlyField(field)).forEach(field => {\n                let control: FormControl = DynamicFormUtil.toFormControl(field, _translateService);\n                formGroup.addControl(field.key, control);\n                formControls.push(control);\n\n                control.valueChanges.debounceTime(200).subscribe(value => {\n                    if (field.model && field.modelValueProperty) {\n                        field.model[field.modelValueProperty] = value;\n                        if (field.onModelChange) {\n                            field.onModelChange(value, formGroup, field.model);\n                        }\n                    }\n                    field.value = value;\n                })\n        });\n\n        //   return group;\n        return formControls;\n\n    }\n\n    static toFormControl(field:FieldConfig<any>,_translateService?: TranslateService) : FormControl {\n\n        if(_translateService) {\n            DynamicFormUtil.resolveLocaleKeys(field, _translateService);\n        }\n        let validatorOpts = field.validators || null;\n        if(field.required){\n            if(validatorOpts == null){\n                validatorOpts = [];\n            }\n            validatorOpts.push(Validators.required)\n        }\n        let value:any = field.value || ''\n        if(field.controlType == \"checkbox\"){\n            value = (field as Checkbox).checked;\n        }\n        if(field.controlType == Chip.CONTROL_TYPE) {\n            value = (field as Chip).selectedItems;\n        }\n\n        return new FormControl(value, validatorOpts)\n\n\n    }\n}"]}