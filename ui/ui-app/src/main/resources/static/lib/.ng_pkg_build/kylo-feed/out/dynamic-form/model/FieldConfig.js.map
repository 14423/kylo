{"version":3,"file":"FieldConfig.js","sourceRoot":"","sources":["FieldConfig.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAC,SAAS,EAAE,WAAW,EAAC,uBAAuB;AAQtD,uBAAM,QAAQ,GAAgB,CAAC,IAAc,EAAC,EAAE,GAAG,OAAO,IAAI,CAAA,EAAC,CAAC;;AAEhE,MAAM,OAAO,WAAW;;;;IAsBpB,YAAY,UAmBR,EAAE;QACF,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,IAAK,OAAO,CAAA;QAChE,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,IAAI,EAAE,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;QACnC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;QAC7D,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,EAAE,CAAC;QAC7C,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,EAAE,CAAC;QAC7C,IAAI,CAAC,KAAK,GAAG,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;QAC7G,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC;QAC/B,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAC/D,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,KAAK,CAAC;QAC1C,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;QAE3C,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,oBAAoB,CAAC;QACzD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAE;QACpD,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;QAC3C,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;KAGlD;;;;IACD,YAAY;QACR,OAAO,IAAI,CAAC,WAAW,IAAI,aAAa,IAAI,IAAI,CAAC,WAAW,IAAI,gBAAgB,IAAI,IAAI,CAAC,WAAW,IAAI,MAAM,CAAC;KAClH;;;;;IAED,aAAa,CAAC,KAAS;QACnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAE,KAAK,CAAC;KAC9C;;;;IAED,aAAa;QACT,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;KAC9C;CAGJ","sourcesContent":["import {FormGroup, ValidatorFn} from \"@angular/forms\";\n\nexport type NgIfCallback = (form:FormGroup) => boolean;\n\nexport type OnFieldChange = (newValue:any,form:FormGroup,model?:any) =>void;\n\nexport type GetErrorMessage = (type:string,validationResponse:any,form:FormGroup) =>string;\n\nconst NgIfTrue:NgIfCallback = (form:FormGroup)=> { return true};\n\nexport class FieldConfig<T> {\n    value: T;\n    key: string;\n    label: string;\n    required: boolean;\n    order: number;\n    controlType: string;\n    placeholder:string;\n    model?:any;\n    hint?:string;\n    readonlyValue:string;\n    modelValueProperty:string;\n    pattern?:string;\n    onModelChange?:OnFieldChange;\n    validators?: ValidatorFn[] | null;\n    disabled?:boolean;\n    placeholderLocaleKey?:string;\n    labelLocaleKey?:string;\n    styleClass:string;\n    ngIf?:NgIfCallback\n    getErrorMessage?:GetErrorMessage\n\n    constructor(options: {\n        value?: T,\n        key?: string,\n        required?: boolean,\n        order?: number,\n        controlType?: string,\n        placeholder?:string,\n        model?:any,\n        hint?:string,\n        readonlyValue?:string,\n        modelValueProperty?:string,\n        pattern?:string,\n        disabled?:boolean,\n        placeholderLocaleKey?:string,\n        styleClass?:string,\n        validators?:ValidatorFn[],\n        ngIf?:NgIfCallback,\n        onModelChange?:OnFieldChange,\n        getErrorMessage?:GetErrorMessage,\n    } = {}) {\n        this.modelValueProperty = options.modelValueProperty  || 'value'\n        this.value = options.value;\n        this.key = options.key || '';\n        this.required = !!options.required;\n        this.order = options.order === undefined ? 1 : options.order;\n        this.controlType = options.controlType || '';\n        this.placeholder = options.placeholder || '';\n        this.model = (options.model && options.model.hasOwnProperty(this.modelValueProperty)) ? options.model : this;\n        this.hint = options.hint || '';\n        this.readonlyValue = options.readonlyValue || this.model.value;\n        this.pattern = options.pattern;\n        this.disabled = options.disabled || false;\n        this.styleClass = options.styleClass || '';\n\n        this.placeholderLocaleKey = options.placeholderLocaleKey;\n        this.validators = options.validators;\n        this.ngIf = options.ngIf ? options.ngIf : NgIfTrue ;\n        this.onModelChange = options.onModelChange;\n        this.getErrorMessage = options.getErrorMessage;\n\n\n    }\n    isStaticText(){\n        return this.controlType == \"static-text\" || this.controlType == \"section-header\" || this.controlType == \"icon\";\n    }\n\n    setModelValue(value:any){\n        this.model[this.modelValueProperty]= value;\n    }\n\n    getModelValue():any {\n        return this.model[this.modelValueProperty];\n    }\n\n\n}\n"]}