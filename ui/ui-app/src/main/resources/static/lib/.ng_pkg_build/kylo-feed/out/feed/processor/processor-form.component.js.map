{"version":3,"file":"processor-form.component.js","sourceRoot":"","sources":["processor-form.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, Input, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {FormGroup} from \"@angular/forms\";\nimport * as _ from \"underscore\"\n\nimport {Templates} from \"../../feed-mgr/services/TemplateTypes\";\nimport {FieldConfig} from \"../../dynamic-form/model/FieldConfig\";\nimport {FieldGroup} from \"../../dynamic-form/model/FieldGroup\";\nimport {InputType} from \"../../dynamic-form/model/InputText\";\nimport {DynamicFormBuilder} from \"../../dynamic-form/services/dynamic-form-builder\";\nimport {DynamicFormFieldGroupBuilder} from \"../../dynamic-form/services/dynamic-form-field-group-builder\";\nimport {DynamicFormService} from \"../../dynamic-form/services/dynamic-form.service\";\nimport {ConfigurationFieldBuilder} from \"../../dynamic-form/services/field-config-builder\";\nimport {Property} from \"../model/property\";\nimport {ProcessorRef} from \"./processor-ref\";\n\nexport class FieldConfigurationState {\n\n    formFieldOrder = 0;\n\n    /**\n     * Map of the inputProcessorId to the controls related to that input\n     */\n    inputFieldsMap: { [key: string]: FieldConfig<any>[] } = {};\n\n    /**\n     * Map of all processors other inputs to array of configs\n     */\n    processorFieldMap: { [key: string]: FieldConfig<any>[] } = {};\n\n    /**\n     * Return all fieldconfig objects for a given input processor\n     */\n    getFieldsForInput(processorId: string, emptyArrayIfNull: boolean = true): FieldConfig<any>[] {\n        if (!this.hasInputFields(processorId) && emptyArrayIfNull) {\n            return [];\n        }\n        else {\n            return this.inputFieldsMap[processorId];\n        }\n    }\n\n    /**\n     * are there input fields defined for the processor\n     * param {string} processorId\n     * return {boolean}\n     */\n    hasInputFields(processorId: string) {\n        return this.inputFieldsMap[processorId] != undefined;\n    }\n\n    /**\n     * are there fields defined for the processor\n     * param {string} processorId\n     * return {boolean}\n     */\n    hasNonInputFields(processorId: string) {\n        return this.processorFieldMap[processorId] != undefined;\n    }\n\n    /**\n     * Return all fieldconfig objects for a given input processor\n     */\n    getFieldsForNonInput(processorId: string, emptyArrayIfNull: boolean = true): FieldConfig<any>[] {\n        if (!this.hasNonInputFields(processorId) && emptyArrayIfNull) {\n            return [];\n        }\n        else {\n            return this.processorFieldMap[processorId];\n        }\n    }\n\n    getAndIncrementFieldOrder() {\n        let order = this.formFieldOrder;\n        this.formFieldOrder++;\n        return order;\n    }\n\n    incrementAndGetFieldOrder() {\n        this.formFieldOrder++;\n        return this.formFieldOrder;\n    }\n\n    reset() {\n        this.formFieldOrder = 0;\n        this.inputFieldsMap = {};\n        this.processorFieldMap = {}\n    }\n}\n\nexport class FieldConfigurationBuilder {\n\n    formGroupBuilder: DynamicFormFieldGroupBuilder;\n\n    constructor(private state: FieldConfigurationState, private addSectionHeader: boolean) {\n    }\n\n    public createFormFields(processor: ProcessorRef, properties?: Property[]): FieldConfig<any>[] {\n        this.formGroupBuilder = new DynamicFormBuilder().column();\n        return this.toFieldConfig(processor as any, (properties != null) ? properties : processor.processor.properties);\n    }\n\n    private buildField(property: Templates.Property): FieldConfig<any> {\n        let field: FieldConfig<any>;\n        //build the generic options to be used by all fields\n        let label = property.propertyDescriptor.displayName || property.propertyDescriptor.name;\n        let configBuilder = new ConfigurationFieldBuilder().setKey(property.nameKey).setOrder(this.state.getAndIncrementFieldOrder()).setPlaceholder(label).setRequired(property.required).setValue(property.value).setModel(property).setHint(property.propertyDescriptor.description);\n\n        if (this.isInputText(property)) {\n            //get the correct input type\n\n            let type = property.renderType;\n            if (property.sensitive) {\n                type = \"password\";\n            }\n            let inputType: InputType = <InputType>InputType[type] || InputType.text;\n\n            //create the field\n            field = this.formGroupBuilder.text().update(configBuilder).setType(inputType).build();\n\n        }\n        else if (property.renderType == \"select\") {\n            field = this.formGroupBuilder.select().update(configBuilder).setOptions(this.getSelectOptions(property)).build()\n\n        }\n        else if (property.renderType == \"radio\") {\n            field = this.formGroupBuilder.radio().update(configBuilder).setOptions(this.getSelectOptions(property)).build();\n\n        }\n        else if (property.renderType == \"checkbox-true-false\" || property.renderType == \"checkbox-custom\") {\n            let trueValue = property.renderOptions['trueValue'] || 'true';\n            let falseValue = property.renderOptions['falseValue'] || 'false';\n            field = this.formGroupBuilder.checkbox().update(configBuilder).setTrueValue(trueValue).setFalseValue(falseValue).build();\n        }\n        else if (property.renderType == \"textarea\") {\n            field = this.formGroupBuilder.textarea().update(configBuilder).build();\n        }\n        return field;\n    }\n\n    /**\n     * convert the property allowable values to label,value objects\n     */\n    private getSelectOptions(property: Templates.Property): { label: string, value: string }[] {\n        //get the select options\n        let options: ({ label: string, value: string })[] = [];\n\n        if (property.propertyDescriptor.allowableValues && property.propertyDescriptor.allowableValues.length > 0) {\n            options = (<any[]>property.propertyDescriptor.allowableValues).map(allowableValue => {\n                return {label: allowableValue.displayName, value: allowableValue.value}\n            });\n        }\n        else if (property.renderOptions && property.renderOptions.selectOptions && property.renderOptions.selectOptions.length > 0) {\n            let selectOptions = JSON.parse(property.renderOptions.selectOptions);\n            options = (<any[]>selectOptions).map(allowableValue => {\n                return {label: allowableValue, value: allowableValue}\n            });\n        }\n        //add in the not set value\n        if (!property.required) {\n            options.unshift({label: \"Not Set\", value: \"\"});\n        }\n        return options;\n    }\n\n    private toFieldConfig(processor: Templates.Processor, properties: Property[]): FieldConfig<any>[] {\n        let elements: FieldConfig<any>[] = [];\n\n        properties.filter((property: Templates.Property) => property.userEditable).map((property: Templates.Property) => {\n\n            if (!property.uniqueId) {\n                property.uniqueId = _.uniqueId(\"property-\");\n            }\n            let fieldConfig: FieldConfig<any> = this.buildField(property);\n\n            if (property.inputProperty) {\n                if (this.state.inputFieldsMap[processor.id] == undefined) {\n                    this.state.inputFieldsMap[processor.id] = [];\n                }\n                this.state.inputFieldsMap[processor.id].push(fieldConfig);\n            }\n            else {\n                if (this.state.processorFieldMap[processor.id] == undefined) {\n                    this.state.processorFieldMap[processor.id] = [];\n                    if (this.addSectionHeader !== false) {\n                        //add a new SectionHeader\n                        let sectionHeader = this.formGroupBuilder.sectionHeader().setOrder(this.state.getAndIncrementFieldOrder()).setPlaceholder(processor.name).setShowDivider(true).build();\n                        elements.push(sectionHeader);\n                        this.state.processorFieldMap[processor.id].push(sectionHeader);\n                    }\n                }\n                this.state.processorFieldMap[processor.id].push(fieldConfig);\n            }\n\n            elements.push(fieldConfig);\n        });\n        return elements;\n    }\n\n    private isInputText(property: Templates.Property) {\n        return (property.renderType == null || property.renderType == \"text\" || property.renderType == \"email\" || property.renderType == \"number\" || property.renderType == \"password\");\n    }\n}\n\n@Component({\n    selector: \"processor-form\",\n    template: `\n      <dynamic-form [form]=\"form\" [fieldGroups]=\"fieldGroups\" [readonly]=\"readonly\"></dynamic-form>\n    `\n})\nexport class ProcessorFormComponent implements OnChanges {\n\n    @Input()\n    addSectionHeader: boolean | string;\n\n    @Input()\n    form: FormGroup;\n\n    @Input()\n    processor: ProcessorRef;\n\n    @Input()\n    properties: Property | Property[];\n\n    @Input()\n    readonly: boolean;\n\n    fieldGroups = [new FieldGroup()];\n\n    private fieldConfigurationState: FieldConfigurationState = new FieldConfigurationState();\n\n    constructor(private dynamicFormService: DynamicFormService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ((changes.processor || changes.properties)) {\n            if (this.processor != null) {\n                this.fieldConfigurationState.reset();\n\n                new FieldConfigurationBuilder(this.fieldConfigurationState, (this.addSectionHeader !== \"false\" && this.addSectionHeader !== false))\n                    .createFormFields(this.processor, (typeof this.properties === \"undefined\" || Array.isArray(this.properties)) ? this.properties as any : [this.properties])\n                    .sort((n1, n2) => {\n                        return n1.order - n2.order;\n                    });\n\n                //populate the form with the correct input processors\n                let inputProcessorFields = this.fieldConfigurationState.getFieldsForInput(this.processor.id);\n                if (inputProcessorFields.length == 0) {\n                    inputProcessorFields = this.fieldConfigurationState.getFieldsForNonInput(this.processor.id);\n                }\n                this.fieldGroups[0].fields = inputProcessorFields;\n\n                this.dynamicFormService.addToFormGroup(inputProcessorFields, this.form);\n            } else {\n                this.fieldGroups = [new FieldGroup()];\n            }\n        }\n    }\n}\n"]}